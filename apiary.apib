FORMAT: 1A

# IoweYou
This API is for developers who want to build functionality on top of I Owe You.

# Responses
- 200 OK - the request was successful.
- 201 Created - the request was successful and a resource was created.
- 400 Bad Request - resource was found, but wrong data structure was sent.
- 401 Unauthorized - authentication failed or user doesn't have permissions for requested operation.
- 404 Not Found - resource was not found.

# Group Auth

## Login [/login]
This resource is the first. Use it to log into the API.
Use the access_token in your API calls header: authorization: "Bearer access_token"

### Login into the API [POST]

+ Request (application/json)
        
    + Body
    
            { "username": "Joe", "password": "Doe" }
        
+ Response 200 (application/json)
    + Headers 

            Cache-Control: no-store
            Pragma: no-cache
        
    + Body
        
            {
              "access_token":"2YotnFZFEjr1zCsicMWpAA",
              "token_type":"bearer"
            }

## Registration [/registration]

### Register into the API [POST]

+ Request (application/json)
        
    + Body
    
            { "username": "Joe", "password": "Doe" }
        
+ Response 201 (application/json)
    + Headers 

            Cache-Control: no-store
            Pragma: no-cache
        
    + Body
        
            {
              "access_token":"2YotnFZFEjr1zCsicMWpAA",
              "token_type":"bearer"
            }
                
# Group Users

## My profile [/users/me]
### My profile [GET]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
            
+ Response 200 (application/json)

        {
        "status": "success",
        "users":
            [{
              "id": "1", "username": "Joe Doe"
            }]
        }
        
## Users [/users{?username,limit,offset,filter%5Bwhere%5D%5Busername%5D%5Blike%5D}]
+ Parameters
    + username (optional, string, `Joe Doe`) ... get user by username
    + limit (optional, int, `10`)  ... **default**: 10
    + offset (optional, int, `0`)
    + filter%5Bwhere%5D%5Busername%5D%5Blike%5D (optional, string, `Joe`) ... get users where username like input
    
### List all Users [GET]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
+ Response 200 (application/json)

        {
        "status": "success",
        "users":
            [{
              "id": "1", "username": "Joe Doe"
            }, {
              "id": "2", "username": "Jolana Brocwan"
            }]
        }

## User [/users/{id}]
A single User object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the User to perform action with. Has example value.

### Retrieve a User [GET]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
            
+ Response 200 (application/json)

    + Body

            { 
            "status" : "success",
            "users" : [ 
                { 
                "id" : "3",
                "username" : "Duh"
                } 
            ]
            }

### Remove a User [DELETE]
+ Response 204

# Group Friends

## Friends [/friends{?user_id}]
+ Parameters
    + user_id (optional, int, `1`) ... get friend by user_id
    
### List all Friends [GET]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
            
+ Response 200 (application/json)

        {
        "status": "success",
        "friends":
            [{
              "id": "1", "user_id": "1", "username": "Joe Doe"
            }, {
              "id": "2", "user_id": "2", "username": "Jolana Brocwan"
            }]
        }

## Friends [/friends]

### Add friend [POST]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
    + Body

            { "user_id": "1" }

+ Response 201 (application/json)

        {"status": "success"}
        
# Group Depts

## Depts [/depts{?borrower_id,borrower_name,lender_id,lender_name,type_id,refunded,limit,offset}]
+ Parameters
    + borrower_id (optional, int, `1`) ... get depts by borrower_id
    + borrower_name (optional, string, `Joe Doe`) ... get depts by borrower_name
    + lender_id (optional, int, `2`) ... get depts by lender_id
    + lender_name (optional, string, `Jolana Brocwan`) ... get depts by lender_name
    + type_id (optional, int, `1`) ... get depts by type_id
    + refunded (optional, boolean, `false`) ... get depts by refund, when false, dept is not refunded, **default**: false
    + limit (optional, int, `10`) ... **default**: 10
    + offset (optional, int, `0`)
    
### List all Depts [GET]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
            
+ Response 200 (application/json)

        {
        "status": "success",
        "depts":
            [{
              "id": "1", 
              "borrower_id": "1", 
              "borrower_name": "Joe Doe", 
              "lender_id": "2", 
              "lender_name": "Jolana Brocwan", 
              "type_id": "1", 
              "value": "10.50",
              "refunded": null,
              "created": "2014-11-27T22:48:27Z"
            }, {
              "id": "2", 
              "borrower_id": "2", 
              "borrower_name": "Jolana Brocwan", 
              "lender_id": null, 
              "lender_name": "Boris Jelcin", 
              "type_id": "1", 
              "value": "5.50",
              "refunded": null,
              "created": "2014-11-27T22:48:27Z"
            }, {
              "id": "3", 
              "borrower_id": null, 
              "borrower_name": "Chuck Norris", 
              "lender_id": "2", 
              "lender_name": "Jolana Brocwan", 
              "type_id": "2", 
              "value": "1",
              "refunded": "2014-11-27T23:48:27Z",
              "created": "2014-11-27T22:48:27Z"
            }]
        }
        
## Depts [/depts]

### Add Dept [POST]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
            
    + Body

            {
                "borrower_id": "1", 
                "borrower_name": "Joe Doe", 
                "lender_id": "2", 
                "lender_name": "Jolana Brocwan", 
                "type_id": "1", 
                "value": "10.50"
            }

+ Response 201 (application/json)

            {
              "id": "1", 
              "borrower_id": "1", 
              "borrower_name": "Joe Doe", 
              "lender_id": "2", 
              "lender_name": "Jolana Brocwan", 
              "type_id": "1", 
              "value": "10.50",
              "refunded": null,
              "created": "2014-11-27T22:48:27Z"
            }
            
## Dept [/depts/{id}]
A single Dept object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Dept to perform action with. Has example value.

### Retrieve a Dept [GET]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
            
+ Response 200 (application/json)

    + Body

            { 
            "status" : "success",
            "depts" : [ 
                {
                  "id": "1", 
                  "borrower_id": "1", 
                  "borrower_name": "Joe Doe", 
                  "lender_id": "2", 
                  "lender_name": "Jolana Brocwan", 
                  "type_id": "1", 
                  "value": "10.50",
                  "refunded": null,
                  "created": "2014-11-27T22:48:27Z"
             } 
             ]
            }

### Remove a Dept [DELETE]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
            
+ Response 200 (application/json)

    + Body

            { 
            "status" : "success",
            "isModified" : "true"
            }
            
### Modify a dept [PATCH]

+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
    + Body

            {
                "value": "10.50"
            }    

+ Response 200 (application/json)           

            { 
            "status" : "success",
            "isModified" : "true"
            }
            
## Dept acceptation [/depts/{id}/accept]
### Accept a dept [PUT]
Set debt to accepted, where borrower_id is userId

+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6

+ Response 200 (application/json)           

            { 
            "status" : "success",
            "isModified" : "true"
            }

## Dept rejcetion [/depts/{id}/reject]
### Reject a dept [PUT]
Set debt to rejected, where borrower_id is userId

+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6

+ Response 200 (application/json)           

            { 
            "status" : "success",
            "isModified" : "true"
            }
            
# Group Dept Types

## Types [/types]
### List all dept types [GET]
+ Request (application/json)
    + Headers 

            Authorization: Bearer 19f.3757754d6
            
+ Response 200 (application/json)

        {
        "status": "success",
        "types":
            [{
              "id": "1", 
              "name": "money"
            }, {
              "id": "2", 
              "name": "coffee"
            }, {
              "id": "3", 
              "name": "beer"
            }]
        }

